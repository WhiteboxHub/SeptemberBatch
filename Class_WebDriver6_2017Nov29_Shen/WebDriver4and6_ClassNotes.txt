
WebDriver 4 & 6- XPath,CSS, PageObjectPattern
----------------------------------------------

Locators

Id
class
linktext
partiallinktext
xpath
name
tagname
css

DOM

HTML
<head>
</head>
<body>
   <table>
       <th>.....</th>
      <tr >..
               <td id='data1'>......</td>
       </tr>
       <tr  class='row2'>..
               <td class='data2'>......</td>
               <td> this messge will not be repeated.</td>
       </tr>

</body>

Difference between CSS and XPath

CSS is simple, faster, more cross browser compatible
CSS can only traverse forward in the DOM

XPath can traverse forward and backward in the DOM
text() where it helps to find the inner text .

We need to know how to write our own CSS or Xpath
- CSS generated by Browser might be long
- to uniquely identify
- to have compatible identifier

<input id='name' class='text'>
CSS how to identify id
#name
.text
^  - startswith
$  - endswith    * - contains

/html/body/table/tr[2]/td

.row2+

CSS
To identify with id of the element
#promo-slider
[id=' promo-slider ']
#logo
[id='logo']

[class='hidden-xs top-bar']
.hidden-xs.top-bar

[attributename='attributeValue']

#SearchContainer > div > div.arrange-fit > div.sidebar-container > div:nth-child(4)

^ -startswith
$ - endswith
    * - contains
[attributeName^='attribute']

[id^='a712V']

#sponsored-container-bottom-1
[id^='sponsored-container-bottom']

[class$='fit']

By.id('sponsored-container-bottom-1']
.has-sponsored-products div   ---------> any child
.has-sponsored-products>div      ----- > is for direct child

.has-sponsored-products>div>div>div>div>div:nth-of-type(2)
attributeName:nth-of-type(elementValue)

XPath

absolute & relative Xpath

/  absolute

/html/body/table/tr/td

//  - relative xpath

/html/body/table/tr  - both tr will be returned
//*[@id='data1']/ancestor::tr

//*[@class='data2']/following-sibling::td

//*[@attributename='attrvalue']

//*[@class='department-facet-list']

//*[@id="1511827423111-Expander"]/div

//*[starts-with(@attribname, 'attributevalue')]

//*[contains(@attribname, 'attributevalue')]

sibling
following-sibling::attributename
preceding-sibling:: attributename

descendant:: attributename
ancestor:: attributename

attribute is the property and should be given with @
//input[@class='textField']
//input[@name='username']
//input[contains(@name, 'username')]
text() - gives the inner text                  <td>Boxes<td>
//a[@id='loginButton']
//a[text()='Login'] ====== perfect match
//a[contains(text(),'Login')] ====== approx match but case sensitive

//tag[@att1=v1 and @att2=v2]
//input[@id='FirstName' and @name='FirstName']

//tag[@att=val]

tree structure of the tags
<table>
  <tbody>
  <tr>
  <td>.......</td>
  <td>
  <input .....>
  </td>
  </tr>
  <tr>
  <td>.......</td>
  <td>
  <input .....>
  </td>
  </tr>
  </tbody>
</table>

                               table attribute class='textFieldsTable'
      |----------------------------------tbody-------------------------------|
     tr                                                                                                tr
  |---------------------------|                                                   |---------------------------|
td                                   td                                                td                                   td
text=username     <input name='username'>         text=Password         < input name='pwd' >
                                            img Enter username

//input[@name='username']/ancestor::table[@class='textFieldsTable']

//input[@name='username']/ancestor::table/tr[2]
/table/tbody/tr[1]/td[1]
//input[@name='username']/preceding-sibling::td
// input[@name='username']/following-sibling::img

/table/tbody/tr[1]/td[2]

/table[@class='textFieldsTable']/descendant::input[@name='username']

//input[@name='username']
//tagname[@attribute='attributevalue]
attribute = name, class, id

//input[@name='pwd']

//table[@class='textFieldsTable']/tbody/tr/td[text()='Username:']/following-sibling::td/input

//input[@name='username']/preceding-sibling::td[text()='username']
//table[@class='textFieldsTable']/descendant::input[@name='username']
//input[@name='username']/ancestor::table[@class='textFieldsTable']

Parent will be denoted by [ ]
Child will be denoted by /

//input[@name='username'] ------------>output is

//td[text()='Username:']-----------> output

//table[@class='textFieldsTable'] ---- output

//table[@class='textFieldsTable']/tbody/tr/td[text()='Username:']

//table[@class='textFieldsTable']/tbody/tr/td/input ==>2 outputs

//table[@class=textFieldsTable']/tbody/tr/td/input[@name='username']

//table[@class='textFieldsTable']/tbody/tr/td[text()='Username:']/input ===> no output

siblings ===> following-sibling / preceding-sibling

following-sibling --- younger
preceding-sibling ------elder

//table[@class='textFieldsTable']/tbody/tr/td[text()='Username:']/following-sibling::td/input

-----------------------------------------
for output td and input the command is
//td[input[@name='username']]

-------------------------------------------
for entire tr first tag info the command is //tr[td[input[@name='username']]]

here the approach in down to up ..............in //tr/td/input[@name='username'] is top to down
based on the child search the parent

//td[input] will give 4 matches since it checks for all parents
---------------------------------------------------------------------------------------------------

Usage of descendant ---- getting the approx child

//table[@class='textFieldsTable']/tbody/tr/td/input[@name='username']
if suppose they modify the html document and add/remove tags it would be a failure for the testcase.
So we could use descendant ..
//table[@class='textFieldsTable']/descendant::input[@name='username']
gets the appox proper child from the specified table

------------------------------------------------------------
Usageof ancestor ---- grandparent

to get output of the whole table we can use the below
//table[tbody[tr[td[input[@name='username']]]]]
//table[tbody[tr[td]]]

same as the above it can be written with the use of ancestor
//input[@name='username']/ancestor::table[@class='textFieldsTable'] --- down to top approach

https://www.w3schools.com/xml/xpath_axes.asp

Page Object Pattern

BRD / SRS - or any documentation of requirements

Product Backlog- collection of user story
what is a user story -  requirements, simple & short

eg.  check for replication
As user I want <action> so that <result>

user story will be subdivided into one or more tasks

TC will be written each task

how or why should we write our test case using a pattern?

Page Object Model

Maven

Page Class  - functionality for each page
Test Class --- pass the input to the page class and get the output.
                       write Assertion. we need to inject the webdriver to the page class
                        using the constructor
common     ---  common functionality for test class  BaseTest
